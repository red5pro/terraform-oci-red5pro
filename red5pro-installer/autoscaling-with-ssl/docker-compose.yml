---
version: '3.8'
name: autoscaling

services:
  kafka0:
    image: confluentinc/cp-kafka:${KAFKA_VERSION:-latest}
    deploy:
      replicas: ${KAFKA_REPLICAS-1}
    restart: unless-stopped
    hostname: kafka0
    container_name: kafka0
    ports:
      - 9092:9092
      - 9997:9997
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_SSL_TRUSTSTORE_CERTIFICATES: ${KAFKA_SSL_TRUSTSTORE_CERTIFICATES}
      KAFKA_SSL_KEYSTORE_KEY: ${KAFKA_SSL_KEYSTORE_KEY}
      KAFKA_SSL_KEYSTORE_CERTIFICATE_CHAIN: ${KAFKA_SSL_KEYSTORE_CERTIFICATE_CHAIN}
      KAFKA_LISTENER_NAME_CONTROLLER_PLAIN_SASL_JAAS_CONFIG: org.apache.kafka.common.security.plain.PlainLoginModule required username="admin" password="${KAFKA_ADMIN_PASSWORD}" user_admin="${KAFKA_ADMIN_PASSWORD}" user_client="${KAFKA_CLIENT_PASSWORD}";
      KAFKA_LISTENER_NAME_BROKER_PLAIN_SASL_JAAS_CONFIG: org.apache.kafka.common.security.plain.PlainLoginModule required username="admin" password="${KAFKA_ADMIN_PASSWORD}" user_admin="${KAFKA_ADMIN_PASSWORD}" user_client="${KAFKA_CLIENT_PASSWORD}";
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: BROKER:SASL_SSL,CONTROLLER:SASL_SSL
      KAFKA_ADVERTISED_LISTENERS: BROKER://${KAFKA_IP}:9092
      KAFKA_MAX_REQUEST_SIZE: 52428800
      KAFKA_INITIAL_BROKER_REGISTRATION_TIMEOUT_MS: 240000
      KAFKA_HEAP_OPTS: "-Xmx2g -Xms1g"
      KAFKA_INTER_BROKER_LISTENER_NAME: BROKER
      KAFKA_SSL_KEYSTORE_TYPE: PEM
      KAFKA_SSL_TRUSTSTORE_TYPE: PEM
      KAFKA_SSL_ENDPOINT_IDENTIFICATION_ALGORITHM:
      KAFKA_SASL_ENABLED_MECHANISMS: PLAIN
      KAFKA_SASL_MECHANISM_CONTROLLER_PROTOCOL: PLAIN
      KAFKA_SASL_MECHANISM_INTER_BROKER_PROTOCOL: PLAIN
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_PROCESS_ROLES: "broker,controller"
      KAFKA_NODE_ID: 1
      KAFKA_CONTROLLER_QUORUM_VOTERS: "1@kafka0:9093"
      KAFKA_LISTENERS: BROKER://:9092,CONTROLLER://:9093
      KAFKA_CONTROLLER_LISTENER_NAMES: "CONTROLLER"
      KAFKA_JMX_PORT: 9997
      KAFKA_JMX_OPTS: -Dcom.sun.management.jmxremote -Dcom.sun.management.jmxremote.authenticate=false -Dcom.sun.management.jmxremote.ssl=false -Djava.rmi.server.hostname=kafka0 -Dcom.sun.management.jmxremote.rmi.port=9997
      KAFKA_LOG4J_ROOT_LOGLEVEL: WARN
      KAFKA_LOG4J_TOOLS_LOGLEVEL: ERROR
      KAFKA_LOG4J_LOGGERS: 'kafka=WARN,kafka.controller=WARN,kafka.log.LogCleaner=WARN,state.change.logger=WARN,kafka.producer.async.DefaultEventHandler=WARN'
    volumes:
      - kafka-data:/var/lib/kafka/data
      - "./certs:/certs"
    command: "bash -c 'if [ ! -f /tmp/update_run.sh ]; then echo \"ERROR: Script was not found /tmp/update_run.sh\" && exit 1 ; else bash /tmp/update_run.sh && /etc/confluent/docker/run ; fi'"
    configs:
      - source: kafka-update-run
        target: /tmp/update_run.sh
    healthcheck:
      test: nc -z localhost 9092 || exit -1
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10

  as-admin:
    image: red5pro/as-admin:latest
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/admin/healthz"]
      start_period: 10s
    depends_on:
      kafka0:
        condition: service_healthy
    ports:
      - 8080
    deploy:
      replicas: 1
    environment:
      R5AS_STATE_DIRECTORY: /root/kafka-streams
      R5AS_AUTOSCALE_PARTITIONS: ${R5AS_AUTOSCALE_PARTITIONS:-1}
      R5AS_REPLICATION_FACTOR: ${R5AS_REPLICATION_FACTOR:-1}
      R5AS_BOOTSTRAP_SERVERS: ${KAFKA_IP}:9092
      R5AS_TERRAFORM_QUERY_INTERVAL: 600000
      R5AS_SECURITY_PROTOCOL_CONFIG: SASL_SSL
      R5AS_SSL_KEYSTORE_TYPE_CONFIG: PEM
      R5AS_SSL_TRUSTSTORE_TYPE_CONFIG: PEM
      R5AS_SSL_CA_CERTIFICATE: ${KAFKA_SSL_TRUSTSTORE_CERTIFICATES}
      R5AS_SASL_USERNAME: client
      R5AS_SASL_PASSWORD: ${KAFKA_CLIENT_PASSWORD}
      R5AS_SASL_ENABLED_MECHANISMS: PLAIN 
      SPRINGDOC_API_DOCS_PATH: /as/v1/admin/v3/api-docs
      SPRINGDOC_SWAGGER_UI_URLS_0_URL: /as/v1/autoscale/v3/api-docs
      SPRINGDOC_SWAGGER_UI_URLS_0_NAME: autoscale
      SPRINGDOC_SWAGGER_UI_URLS_1_URL: /as/v1/auth/v3/api-docs
      SPRINGDOC_SWAGGER_UI_URLS_1_NAME: auth
      SPRINGDOC_SWAGGER_UI_URLS_2_URL: /as/v1/streams/v3/api-docs
      SPRINGDOC_SWAGGER_UI_URLS_2_NAME: streams
      SPRINGDOC_SWAGGER_UI_URLS_3_URL: /as/v1/admin/v3/api-docs
      SPRINGDOC_SWAGGER_UI_URLS_3_NAME: autoscale-admin
      R5AS_CLOUD_PLATFORM_TYPE: ${R5AS_CLOUD_PLATFORM_TYPE:-OCI} # AWS, OCI, LINODE
      R5AS_AUTH_SECRET: ${R5AS_AUTH_SECRET:?R5AS_AUTH_SECRET is not set}
      R5AS_AUTH_JWT_TTL_MINUTES: 400
    labels:
      traefik.http.routers.config-swagger.rule: "PathPrefix(`/swagger-ui`) && (Host(`${TRAEFIK_HOST:?Ensure TRAEFIK_HOST is set to the DNS name of your server.}`) || Host(`${TRAEFIK_IP:?Ensure TRAEFIK_IP is set to the Public IP of your server.}`))"
      traefik.http.routers.config-swagger.entrypoints: "websecure"
      prometheus.scrape: true
      prometheus.path: /metrics
      traefik.enable: "true"
      traefik.http.routers.admin-springdoc.rule: "PathPrefix(`/as/v1/admin/v3`) && (Host(`${TRAEFIK_HOST:?Ensure TRAEFIK_HOST is set to the DNS name of your server.}`) || Host(`${TRAEFIK_IP:?Ensure TRAEFIK_IP is set to the Public IP of your server.}`))"
      traefik.http.routers.admin-springdoc.entrypoints: "websecure"
      traefik.http.routers.admin-springdoc.middlewares: "strip-swagger-admin@docker"
      traefik.http.middlewares.strip-swagger-admin.stripprefix.prefixes: "/as/v1/admin"
      traefik.http.routers.as-admin.rule: "PathPrefix(`/as/v1/admin`) && (Host(`${TRAEFIK_HOST:?Ensure TRAEFIK_HOST is set to the DNS name of your server.}`) || Host(`${TRAEFIK_IP:?Ensure TRAEFIK_IP is set to the Public IP of your server.}`))"
      traefik.http.routers.as-admin.entrypoints: "websecure"
      traefik.http.routers.as-admin.middlewares: "strip-admin@docker"
      traefik.http.middlewares.strip-admin.stripprefix.prefixes: "/as/v1/"

  as-terraform:
    restart: unless-stopped
    deploy:
      replicas: 1
    image: red5pro/as-terraform:latest
    depends_on:
      kafka0:
        condition: service_healthy
    environment:
      R5AS_STATE_DIRECTORY: /root/kafka-streams
      R5AS_AUTOSCALE_PARTITIONS: ${R5AS_AUTOSCALE_PARTITIONS:-1}
      R5AS_REPLICATION_FACTOR: ${R5AS_REPLICATION_FACTOR:-1}
      R5AS_BOOTSTRAP_SERVERS: ${KAFKA_IP}:9092
      R5AS_SECURITY_PROTOCOL_CONFIG: SASL_SSL
      R5AS_SSL_KEYSTORE_TYPE_CONFIG: PEM
      R5AS_SSL_TRUSTSTORE_TYPE_CONFIG: PEM
      R5AS_SSL_CA_CERTIFICATE: ${KAFKA_SSL_TRUSTSTORE_CERTIFICATES}
      R5AS_SASL_USERNAME: client
      R5AS_SASL_PASSWORD: ${KAFKA_CLIENT_PASSWORD}
      R5AS_SASL_ENABLED_MECHANISMS: PLAIN 
      R5AS_COMMAND_INACTIVITY_GAP_MS: 10000
      TF_VAR_oci_tenancy_ocid: ${TF_VAR_oci_tenancy_ocid:?Ensure TF_VAR_oci_tenancy_ocid is set to the OCI tenancy OCID}
      TF_VAR_oci_user_ocid: ${TF_VAR_oci_user_ocid:?Ensure TF_VAR_oci_user_ocid is set to the OCI user OCID}
      TF_VAR_oci_compartment_id: ${TF_VAR_oci_compartment_id:?Ensure TF_VAR_oci_compartment_id is set to the OCI compartment OCID}
      TF_VAR_oci_fingerprint: ${TF_VAR_oci_fingerprint:?Ensure TF_VAR_oci_fingerprint is set to the OCI user fingerprint}
      TF_VAR_oci_private_key_path: /keys/oracle_private_api_key.pem
      TF_VAR_oci_node_ssh_public_key_path: /keys/red5pro_ssh_public_key.pub
      TF_VAR_r5p_license_key: ${TF_VAR_r5p_license_key:?Ensure TF_VAR_r5p_license_key is set to the Red5 Pro license key}
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - ./keys/oracle_private_api_key.pem:/keys/oracle_private_api_key.pem
      - ./keys/red5pro_ssh_public_key.pub:/keys/red5pro_ssh_public_key.pub

  as-proxy:
    image: red5pro/as-proxy:latest
    restart: unless-stopped
    depends_on:
      kafka0:
        condition: service_healthy
    ports:
      - 9080:8080
    environment:
      # R5AS_AUTOSCALE_DOMAIN: ${R5AS_AUTOSCALE_DOMAIN:-kafka0}
      R5AS_BOOTSTRAP_SERVERS: ${KAFKA_IP}:9092
    labels:
      traefik.enable: true
      traefik.http.routers.asproxy.rule: PathPrefix(`/as/v1/proxy`) && (Host(`${TRAEFIK_HOST:?Ensure TRAEFIK_HOST is set to the DNS name of your server.}`) || Host(`${TRAEFIK_IP:?Ensure TRAEFIK_IP is set to the Public IP of your server.}`))
      traefik.http.routers.asproxy.entrypoints: websecure
      traefik.http.routers.asproxy.middlewares: strip-asproxy@docker
      traefik.http.middlewares.strip-asproxy.stripprefix.prefixes: /as/v1/proxy

  as-autoscale-service:
    image: red5pro/as-autoscale-service:latest
    restart: unless-stopped
    deploy:
      replicas: 1
    depends_on:
      kafka0:
        condition: service_healthy
      as-terraform:
        condition: service_started
      as-admin:
        condition: service_started
      as-auth:
        condition: service_started
      as-streams:
        condition: service_started
      reverse-proxy:
        condition: service_started

    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/autoscale/healthz"]
      start_period: 10s
    ports:
      - "8080"
    environment:
      R5AS_STATE_DIRECTORY: /root/kafka-streams
      R5AS_AUTOSCALE_PARTITIONS: ${R5AS_AUTOSCALE_PARTITIONS:-1}
      R5AS_REPLICATION_FACTOR: ${R5AS_REPLICATION_FACTOR:-1}
      # R5AS_APPLICATION_HOST: ${R5AS_APPLICATION_HOST}
      # R5AS_APPLICATION_PORT: ${R5AS_APPLICATION_PORT}
      R5AS_BOOTSTRAP_SERVERS: ${KAFKA_IP}:9092
      R5AS_BOOTSTRAP_SERVERS_FOR_NODES: ${KAFKA_IP}:9092
      R5AS_AUTOCALE_EVALUATION_INTERVAL: 4000
      R5AS_SECURITY_PROTOCOL_CONFIG: SASL_SSL
      R5AS_SSL_KEYSTORE_TYPE_CONFIG: PEM
      R5AS_SSL_TRUSTSTORE_TYPE_CONFIG: PEM
      R5AS_SSL_CA_CERTIFICATE: ${KAFKA_SSL_TRUSTSTORE_CERTIFICATES}
      R5AS_SASL_USERNAME: client
      R5AS_SASL_PASSWORD: ${KAFKA_CLIENT_PASSWORD}
      R5AS_SASL_ENABLED_MECHANISMS: PLAIN 
    labels:
      traefik.enable: true
      traefik.http.routers.autoscale-springdoc.rule: PathPrefix(`/as/v1/autoscale/v3`) && (Host(`${TRAEFIK_HOST:?Ensure TRAEFIK_HOST is set to the DNS name of your server.}`) || Host(`${TRAEFIK_IP:?Ensure TRAEFIK_IP is set to the Public IP of your server.}`))
      traefik.http.routers.autoscale-springdoc.entrypoints: websecure
      traefik.http.routers.autoscale-springdoc.middlewares: strip-autoscale@docker
      traefik.http.middlewares.strip-autoscale.stripprefix.prefixes: /as/v1/autoscale
      traefik.http.routers.autoscale.rule: PathPrefix(`/as/v1/autoscale`) && (Host(`${TRAEFIK_HOST:?Ensure TRAEFIK_HOST is set to the DNS name of your server.}`) || Host(`${TRAEFIK_IP:?Ensure TRAEFIK_IP is set to the Public IP of your server.}`))
      traefik.http.routers.autoscale.entrypoints: websecure
      traefik.http.routers.autoscale.middlewares: strip-m-autoscale@docker
      traefik.http.middlewares.strip-m-autoscale.stripprefix.prefixes: /as/v1

  as-auth:
    image: red5pro/as-auth:latest
    restart: unless-stopped
    ports:
      - 10080:8080
    environment:
      R5AS_AUTH_SECRET: ${R5AS_AUTH_SECRET:?R5AS_AUTH_SECRET is not set}
      R5AS_AUTH_JWT_TTL_MINUTES: 400
      R5AS_AUTH_USER: ${R5AS_AUTH_USER:?R5AS_AUTH_USER is not set}
      R5AS_AUTH_PASS: ${R5AS_AUTH_PASS:?R5AS_AUTH_PASS is not set}
    labels:
      traefik.enable: true
      traefik.http.routers.asauth.rule: PathPrefix(`/as/v1/auth`) && (Host(`${TRAEFIK_HOST:?Ensure TRAEFIK_HOST is set to the DNS name of your server.}`) || Host(`${TRAEFIK_IP:?Ensure TRAEFIK_IP is set to the Public IP of your server.}`))
      traefik.http.routers.asauth.entrypoints: websecure
      traefik.http.routers.asauth.middlewares: strip-asauth@docker
      traefik.http.middlewares.strip-asauth.stripprefix.prefixes: /as/v1

  as-streams:
    image: red5pro/as-streams:latest
    restart: unless-stopped
    deploy:
      replicas: 1
    depends_on:
      kafka0:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/streams/stream/healthz"]
      start_period: 10s
    environment:
      R5AS_STATE_DIRECTORY: /root/kafka-streams
      R5AS_AUTH_SECRET: ${R5AS_AUTH_SECRET:?R5AS_AUTH_SECRET is not set}
      R5AS_AUTH_JWT_TTL_MINUTES: 400
      R5AS_BOOTSTRAP_SERVERS: ${KAFKA_IP}:9092
      R5AS_MESSAGE_BUS_CLEAR_STREAMS: false
      R5AS_AUTOSCALE_PARTITIONS: ${R5AS_AUTOSCALE_PARTITIONS:-1}
      R5AS_REPLICATION_FACTOR: ${R5AS_REPLICATION_FACTOR:-1}
      R5AS_SECURITY_PROTOCOL_CONFIG: SASL_SSL
      R5AS_SSL_KEYSTORE_TYPE_CONFIG: PEM
      R5AS_SSL_TRUSTSTORE_TYPE_CONFIG: PEM
      R5AS_SSL_CA_CERTIFICATE: ${KAFKA_SSL_TRUSTSTORE_CERTIFICATES}
      R5AS_SASL_USERNAME: client
      R5AS_SASL_PASSWORD: ${KAFKA_CLIENT_PASSWORD}
      R5AS_SASL_ENABLED_MECHANISMS: PLAIN 
    labels:
      prometheus.scrape: true
      prometheus.path: /streams/metrics
      traefik.enable: true
      traefik.http.routers.asstreams.rule: PathPrefix(`/as/v1/streams`) && (Host(`${TRAEFIK_HOST:?Ensure TRAEFIK_HOST is set to the DNS name of your server.}`) || Host(`${TRAEFIK_IP:?Ensure TRAEFIK_IP is set to the Public IP of your server.}`))
      traefik.http.routers.asstreams.entrypoints: websecure
      traefik.http.routers.asstreams.middlewares: strip-asstreams@docker
      traefik.http.middlewares.strip-asstreams.stripprefix.prefixes: /as/v1

  reverse-proxy:
    image: traefik
    restart: unless-stopped
    command:
      --log.level=DEBUG
      --api.insecure=true
      --api.dashboard=true
      --providers.docker=true
      --providers.docker.exposedbydefault=false
      --entrypoints.web.address=:80
      --entrypoints.web.http.redirections.entrypoint.to=websecure
      --entryPoints.web.http.redirections.entrypoint.scheme=https
      --entrypoints.websecure.address=:443
      --entrypoints.websecure.http.tls=true
      --entrypoints.websecure.http.tls.domains[0].main=${TRAEFIK_HOST:?Ensure TRAEFIK_HOST is set to the DNS name of your server.}
      --certificatesresolvers.myresolver.acme.tlschallenge=${TRAEFIK_TLS_CHALLENGE:-false}
      --certificatesresolvers.myresolver.acme.email=oles@red5.net
      --certificatesresolvers.myresolver.acme.storage=/certs/red5.json
      ${TRAEFIK_CMD}
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - "./certs:/certs"
      - /var/run/docker.sock:/var/run/docker.sock
    configs:
      - source: traefik-config-ssl
        target: /scripts/traefik.yaml
    labels:
      traefik.enable: true
      traefik.http.routers.traefik-ui.entrypoints: websecure
      traefik.http.routers.traefik-ui.tls.certresolver: myresolver
      traefik.http.routers.traefik-ui.rule: (PathPrefix(`/dashboard`) || PathPrefix(`/api`)) && (Host(`${TRAEFIK_HOST:?Ensure TRAEFIK_HOST is set to the DNS name of your server.}`) || Host(`${TRAEFIK_IP:?Ensure TRAEFIK_IP is set to the Public IP of your server.}`))
      traefik.http.services.traefik-ui.loadbalancer.server.port: 8080
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  as-testbeds:
     image: red5pro/as-testbed:latest
     restart: unless-stopped
     depends_on:
       as-auth:
         condition: service_started
       as-streams:
         condition: service_started
       as-admin:
         condition: service_started
     ports:
       - 12080:80
     labels:
       traefik.enable: true
       traefik.http.routers.red5.tls: true
       traefik.http.routers.red5.entrypoints: websecure
       traefik.http.routers.red5.rule: PathPrefix(`/red5`) && (Host(`${TRAEFIK_HOST:?Ensure TRAEFIK_HOST is set to the DNS name of your server.}`) || Host(`${TRAEFIK_IP:?Ensure TRAEFIK_IP is set to the Public IP of your server.}`))
       traefik.http.routers.red5.middlewares: our-slash@docker
       traefik.http.services.testbed-service.loadbalancer.server.port: 80
       traefik.http.routers.red5css.entrypoints: websecure
       traefik.http.routers.red5css.rule: PathPrefix(`/css`) && (Host(`${TRAEFIK_HOST:?Ensure TRAEFIK_HOST is set to the DNS name of your server.}`) || Host(`${TRAEFIK_IP:?Ensure TRAEFIK_IP is set to the Public IP of your server.}`))
       traefik.http.routers.red5images.entrypoints: websecure
       traefik.http.routers.red5images.rule: PathPrefix(`/images`) && (Host(`${TRAEFIK_HOST:?Ensure TRAEFIK_HOST is set to the DNS name of your server.}`) || Host(`${TRAEFIK_IP:?Ensure TRAEFIK_IP is set to the Public IP of your server.}`))
       traefik.http.routers.red5lib.entrypoints: websecure
       traefik.http.routers.red5lib.rule: PathPrefix(`/lib`) && (Host(`${TRAEFIK_HOST:?Ensure TRAEFIK_HOST is set to the DNS name of your server.}`) || Host(`${TRAEFIK_IP:?Ensure TRAEFIK_IP is set to the Public IP of your server.}`))
       traefik.http.routers.red5script.entrypoints: websecure
       traefik.http.routers.red5script.rule: PathPrefix(`/script`) && (Host(`${TRAEFIK_HOST:?Ensure TRAEFIK_HOST is set to the DNS name of your server.}`) || Host(`${TRAEFIK_IP:?Ensure TRAEFIK_IP is set to the Public IP of your server.}`))
       traefik.http.middlewares.our-slash.chain.middlewares: strip-prefix-1,strip-prefix-2
       traefik.http.middlewares.strip-prefix-1.redirectregex.regex: ^(https?://[^/]+/[a-z0-9_]+)$
       traefik.http.middlewares.strip-prefix-1.redirectregex.replacement: $${1}/
       traefik.http.middlewares.strip-prefix-1.redirectregex.permanent: true
       traefik.http.middlewares.strip-prefix-2.stripprefixregex.regex: /[a-z0-9_]+

  # kafka-ui:
  #   container_name: kafka-ui
  #   image: provectuslabs/kafka-ui:latest
  #   restart: unless-stopped
  #   ports:
  #     - 8090:8080
  #   depends_on:
  #     kafka0:
  #       condition: service_healthy
  #   environment:
  #     KAFKA_CLUSTERS_0_NAME: local
  #     KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: ${KAFKA_IP}:9092
  #     KAFKA_CLUSTERS_0_PROPERTIES_SECURITY_PROTOCOL: SASL_SSL
  #     KAFKA_CLUSTERS_0_PROPERTIES_SSL_TRUSTSTORE: ${KAFKA_SSL_TRUSTSTORE_CERTIFICATES}
  #     # Caused by: javax.net.ssl.SSLHandshakeException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target
  #     KAFKA_CLUSTERS_0_PROPERTIES_SASL_MECHANISM: PLAIN
  #     KAFKA_CLUSTERS_0_PROPERTIES_SASL_JAAS_CONFIG: org.apache.kafka.common.security.plain.PlainLoginModule required username="client" password="${KAFKA_CLIENT_PASSWORD}";
  #     KAFKA_CLUSTERS_0_METRICS_PORT: 9997
  #     KAFKA_CLUSTERS_0_KAFKACONNECT_0_NAME: first
  #     KAFKA_CLUSTERS_0_KAFKACONNECT_0_ADDRESS: http://kafka-connect0:8083
  #     DYNAMIC_CONFIG_ENABLED: 'true'
  #     KAFKA_CLUSTERS_0_AUDIT_TOPICAUDITENABLED: 'true'
  #     KAFKA_CLUSTERS_0_AUDIT_CONSOLEAUDITENABLED: 'true'
  #     SERVER_SERVLET_CONTEXT_PATH: /kafka
  #   labels:
  #     traefik.enable: true
  #     traefik.http.routers.kafka-ui.rule: PathPrefix(`/kafka`) && (Host(`${TRAEFIK_HOST:?Ensure TRAEFIK_HOST is set to the DNS name of your server.}`) || Host(`${TRAEFIK_IP:?Ensure TRAEFIK_IP is set to the Public IP of your server.}`))
  #     traefik.http.routers.kafka-ui.entrypoints: websecure

  as-debug-ui:
    image: "red5pro/as-debug-ui:latest"
    restart: unless-stopped
    labels:
      traefik.enable: true
      traefik.http.routers.caddy.entrypoints: websecure
      #traefik.http.routers.caddy.tls.certresolver: myresolver
      traefik.http.routers.caddy.rule: PathPrefix(`/`) && (Host(`${TRAEFIK_HOST:?Ensure TRAEFIK_HOST is set to the DNS name of your server.}`) || Host(`${TRAEFIK_IP:?Ensure TRAEFIK_IP is set to the Public IP of your server.}`))

volumes:
  kafka-data:

configs:
  kafka-update-run:
    content: |
      #!/bin/sh
      sed -i '/KAFKA_ZOOKEEPER_CONNECT/d' /etc/confluent/docker/configure
      echo "export CLUSTER_ID=${KAFKA_CLUSTER_ID:-a1b2c3d4-e5f6-7a8b-9c0d-e1f2a3b4c5d6}" >> /etc/confluent/docker/bash-config
      sed "s/#max.request.size=/max.request.size=52428800/" -i /etc/kafka/producer.properties
    
  traefik-config-ssl:
    content: |
      tls:
        stores:
          default:
            defaultCertificate:
              certFile: /certs/cert.pem
              keyFile: /certs/privkey.pem
        certificates:
          - certFile: /certs/cert.pem
            keyFile: /certs/privkey.pem